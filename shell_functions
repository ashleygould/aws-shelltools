#!/bin/bash
#set -x


aws-whoami() {
  aws sts get-caller-identity
}

aws-env() {
  env | grep ^AWS | sort
}

aws-unset-mfa-token() {
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_SESSION_TOKEN
  unset AWS_SESSION_TOKEN_EXPIRATION
  unset AWS_MFA_ACCESS_KEY_ID
  unset AWS_MFA_SECRET_ACCESS_KEY
  unset AWS_MFA_SESSION_TOKEN
  unset AWS_MFA_SESSION_TOKEN_EXPIRATION
}

aws-show-assumed-role() {
  echo "AWS_ASSUMED_ROLE_PROFILE:     $AWS_ASSUMED_ROLE_PROFILE"
  echo "AWS_ASSUMED_ROLE_ARN:         $AWS_ASSUMED_ROLE_ARN"
  echo "AWS_SESSION_TOKEN_EXPIRATION: $AWS_SESSION_TOKEN_EXPIRATION"
}

aws-drop-assumed-role() {
  unset AWS_ASSUMED_ROLE_ARN
  unset AWS_ASSUMED_ROLE_PROFILE

  if [ -n "$AWS_MFA_ACCESS_KEY_ID" ]; then
    export AWS_ACCESS_KEY_ID=$AWS_MFA_ACCESS_KEY_ID
  else
    unset AWS_ACCESS_KEY_ID
  fi

  if [ -n "$AWS_MFA_SECRET_ACCESS_KEY" ]; then
    export AWS_SECRET_ACCESS_KEY=$AWS_MFA_SECRET_ACCESS_KEY
  else
    unset AWS_SECRET_ACCESS_KEY
  fi

  if [ -n "$AWS_MFA_SESSION_TOKEN" ]; then
    export AWS_SESSION_TOKEN=$AWS_MFA_SESSION_TOKEN
  else
    unset AWS_SESSION_TOKEN
  fi

  if [ -n "$AWS_MFA_SESSION_TOKEN_EXPIRATION" ]; then
    export AWS_SESSION_TOKEN_EXPIRATION=$AWS_MFA_SESSION_TOKEN_EXPIRATION
  else
    unset AWS_SESSION_TOKEN_EXPIRATION
  fi
}


aws-profile() {
  usage() {
    cat << EOF

Set or display value of shell environment var AWS_PROFILE.
If no args, echo the current value of AWS_PROFILE.

Usage: aws-profile [-h | -u | <profile_name>]

Args:
  -h: display help message
  -u: unset env var AWS_PROFILE
  <profile_name>: set env var AWS_PROFILE to "profile_name"

EOF
  }
  
  if [ $# -gt 0 ]; then
    case $1 in
      '-h' ) usage;;
      '-u' ) unset AWS_PROFILE;;
      * ) export AWS_PROFILE=$1;;
    esac
  fi
  echo $AWS_PROFILE
}




aws-set-mfa-token() {
  usage() {
    cat << EOF

Request temporary session credentials from AWS STS.  Export these credentials
to environment vars in the current shell.  Affected vars:

  AWS_SECRET_ACCESS_KEY
  AWS_ACCESS_KEY_ID
  AWS_SESSION_TOKEN
  AWS_SESSION_TOKEN_EXPIRATION

Usage: aws-set-token [-h | -u | <profile_name>]

Args:
  -h: display help message
  -u: unset all AWS session environment vars
  <profile_name>: profile to use when setting AWS session token

EOF
  }

  request_session() {
    params=''
    read -p "please enter 6 digit token code for your MFA device: " code
    if [ -n "$code" ]; then
       params="${params}--mfa-token $code"
    fi
    if [ -n "$profile" ]; then
       params="${params} --profile $profile"
    fi
    eval $(awstoken $params)
  }
  
  if [ $# -eq 0 ]; then
    request_session
  elif [ $# -eq 1 ]; then
    case $1 in
      '-h' ) usage;;
      '-u' ) aws-unset-token;;
      * ) profile=$1; request_session;;
    esac
  elif [ $# -gt 1 ]; then
    usage
  fi

}


aws-assume-role() {
  aws-drop-assumed-role
  if [ $# -eq 0 ]; then
    aws-display-assumed-role
  elif [ $# -eq 1 ]; then
    case $1 in
      '-h' ) usage;;
      '-u' ) aws-drop-assumed-role;;
      * ) params="--profile $1";;
    esac
  elif [ $# -eq 2 ]; then
    params="--profile $1 --config $2"
  elif [ $# -eq 3 ]; then
    params="--profile $1 --config $2 --config-dir $3"
  else
    usage
  fi

  result=$(awsassumerole $params)
  #echo $result
  if [ "$?" -ne '0' ]; then
    echo $result
  else
    eval $result
  fi

}


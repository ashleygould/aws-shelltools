#!/bin/bash
#set -x

aws-profile() {
  usage() {
    cat << EOF

Set or display value of shell environment var AWS_PROFILE.
If no args, echo the current value of AWS_PROFILE.

Usage: aws-profile [-h | -u | <profile_name>]

Args:
  -h: display help message
  -u: unset env var AWS_PROFILE
  <profile_name>: set env var AWS_PROFILE to "profile_name"

EOF
  }
  
  if [ $# -gt 0 ]; then
    case $1 in
      '-h' ) usage;;
      '-u' ) unset AWS_PROFILE;;
      * ) export AWS_PROFILE=$1;;
    esac
  fi
  echo $AWS_PROFILE
}




aws-set-token() {
  usage() {
    cat << EOF

Request temporary session credentials from AWS STS.  Export these credentials
to environment vars in the current shell.  Affected vars:

  AWS_SECRET_ACCESS_KEY
  AWS_ACCESS_KEY_ID
  AWS_SESSION_TOKEN
  AWS_SESSION_TOKEN_EXPIRATION

Usage: aws-set-token [-h | -u | <profile_name>]

Args:
  -h: display help message
  -u: unset all AWS session environment vars
  <profile_name>: profile to use when setting AWS session token

EOF
  }

  request_session() {
    params=''
    read -p "please enter 6 digit token code for your MFA device: " code
    if [ -n "$code" ]; then
       params="${params}--mfa-token $code"
    fi
    if [ -n "$profile" ]; then
       params="${params} --profile $profile"
    fi
    echo $params
    eval $(awstoken $params)
  }
  
  if [ $# -eq 0 ]; then
    request_session
  elif [ $# -eq 1 ]; then
    case $1 in
      '-h' ) usage;;
      '-u' ) aws-unset-token;;
      * ) profile=$1; request_session;;
    esac
  elif [ $# -gt 1 ]; then
    usage
  fi

}




# same as running 'aws-set-token -u'
aws-unset-token() {
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_ACCESS_KEY_ID
  unset AWS_SESSION_TOKEN
  unset AWS_SESSION_TOKEN_EXPIRATION
}




aws-assume-role() {
# if no args ask for id and role
# if one arg, use this as profile
# if 2 arg, first is profile, second is role_name
#   try to read profile from ordered list of config file paths
  echo under construction
}

